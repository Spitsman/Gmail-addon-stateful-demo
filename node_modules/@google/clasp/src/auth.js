"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var google_auth_library_1 = require("google-auth-library");
var utils_js_1 = require("./utils.js");
var http = require("http");
var url = require("url");
var open = require('open');
var readline = require('readline');
var commands_js_1 = require("./commands.js");
// API settings
// @see https://developers.google.com/oauthplayground/
exports.REDIRECT_URI_OOB = 'urn:ietf:wg:oauth:2.0:oob';
exports.oauth2Client = new google_auth_library_1.OAuth2Client({
    clientId: '1072944905499-vm2v2i5dvn0a0d2o4ca36i1vge8cvbn0.apps.googleusercontent.com',
    clientSecret: 'v6V3fKV_zWU7iw1DrpO1rknX',
    redirectUri: 'http://localhost',
});
/**
 * Loads the Apps Script API credentials for the CLI.
 * Required before every API call.
 * @param {Function} cb The callback
 * @param {boolean} isLocal If we should load local API credentials for this clasp project.
 */
function getAPICredentials(cb) {
    utils_js_1.DOTFILE.RC_LOCAL.read().then(function (rc) {
        exports.oauth2Client.setCredentials(rc);
        cb(rc);
    }).catch(function (err) {
        utils_js_1.DOTFILE.RC.read().then(function (rc) {
            exports.oauth2Client.setCredentials(rc);
            cb(rc);
        }).catch(function (err) {
            console.error('Could not read API credentials. Error:');
            console.error(err);
            process.exit(-1);
        });
    });
}
exports.getAPICredentials = getAPICredentials;
/**
 * Requests authorization to manage Apps Scrpit projects. Spins up
 * a temporary HTTP server to handle the auth redirect.
 *
 * @param {Object} opts OAuth2 options TODO formalize options
 * @return {Promise} Promise resolving with the authorization code
 */
function authorizeWithLocalhost(opts) {
    return new Promise(function (res, rej) {
        var server = http.createServer(function (req, resp) {
            var urlParts = url.parse(req.url || '', true);
            if (urlParts.query.code) {
                res(urlParts.query.code);
            }
            else {
                rej(urlParts.query.error);
            }
            resp.end(commands_js_1.LOG.AUTH_PAGE_SUCCESSFUL);
            setTimeout(function () {
                process.exit();
            }, 1000);
        });
        server.listen(0, function () {
            exports.oauth2Client.redirectUri = "http://localhost:" + server.address().port;
            var authUrl = exports.oauth2Client.generateAuthUrl(opts);
            console.log(commands_js_1.LOG.AUTHORIZE(authUrl));
            open(authUrl);
        });
    });
}
exports.authorizeWithLocalhost = authorizeWithLocalhost;
/**
 * Requests authorization to manage Apps Script projects. Requires the
 * user to manually copy/paste the authorization code. No HTTP server is
 * used.
 *
 * @param {Object} opts OAuth2 options
 * @return {Promise} Promise resolving with the authorization code
 */
function authorizeWithoutLocalhost(opts) {
    exports.oauth2Client.redirectUri = exports.REDIRECT_URI_OOB;
    var authUrl = exports.oauth2Client.generateAuthUrl(opts);
    console.log(commands_js_1.LOG.AUTHORIZE(authUrl));
    return new Promise(function (res, rej) {
        var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        rl.question(commands_js_1.LOG.AUTH_CODE, function (code) {
            if (code && code.length) {
                res(code);
            }
            else {
                rej("No authorization code entered.");
            }
            rl.close();
        });
    });
}
exports.authorizeWithoutLocalhost = authorizeWithoutLocalhost;
