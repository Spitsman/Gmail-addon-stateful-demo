#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var anymatch = require("anymatch");
require("connect");
var del = require("del");
var fs = require("fs");
var googleapis_1 = require("googleapis");
var mkdirp = require("mkdirp");
var open = require('open');
var path = require('path');
var commander = require('commander');
var readMultipleFiles = require('read-multiple-files');
var recursive = require("recursive-readdir");
var logging = require('@google-cloud/logging');
var chalk = require('chalk');
var prompt = require('inquirer').prompt;
var pluralize = require("pluralize");
var utils_js_1 = require("./src/utils.js");
var auth_js_1 = require("./src/auth.js");
var commands_js_1 = require("./src/commands.js");
var script = googleapis_1.google.script({
    version: 'v1',
    auth: auth_js_1.oauth2Client,
});
/**
 * Requests authorization to manage Apps Script projects.
 * @param {boolean} useLocalhost True if a local HTTP server should be run
 *     to handle the auth response. False if manual entry used.
 */
function authorize(useLocalhost, writeToOwnKey) {
    // const codes = oauth2Client.generateCodeVerifier();
    // See https://developers.google.com/identity/protocols/OAuth2InstalledApp#step1-code-verifier
    var options = {
        access_type: 'offline',
        scope: [
            'https://www.googleapis.com/auth/script.deployments',
            'https://www.googleapis.com/auth/script.projects',
            'https://www.googleapis.com/auth/drive.metadata.readonly',
            'https://www.googleapis.com/auth/script.webapp.deploy',
        ],
    };
    var authCode = useLocalhost ?
        auth_js_1.authorizeWithLocalhost(options) :
        auth_js_1.authorizeWithoutLocalhost(options);
    authCode.then(function (code) {
        return new Promise(function (res, rej) {
            auth_js_1.oauth2Client.getToken(code).then(function (token) { return res(token.tokens); });
        });
    }).then(function (token) {
        writeToOwnKey ? utils_js_1.DOTFILE.RC_LOCAL.write(token) : utils_js_1.DOTFILE.RC.write(token);
    })
        .then(function () { return console.log(commands_js_1.LOG.AUTH_SUCCESSFUL); })
        .catch(function (err) { return console.error(utils_js_1.ERROR.ACCESS_TOKEN + err); });
}
/**
 * Recursively finds all files that are part of the current project, and those that are ignored
 * by .claspignore and calls the passed callback function with the file lists.
 * @param {string} rootDir The project's root directory
 * @param {FilesCallBack} callback The callback will be called with the following paramters
 * error: Error if there's an error, otherwise null
 * result: string[][], List of two lists of strings, ie. [nonIgnoredFilePaths,ignoredFilePaths]
 * files?: Array<AppsScriptFile|undefined> Array of AppsScriptFile objects used by clasp push
 */
function getProjectFiles(rootDir, callback) {
    // Read all filenames as a flattened tree
    recursive(rootDir || path.join('.', '/'), function (err, filePaths) {
        if (err)
            return callback(err, null, null);
        // Filter files that aren't allowed.
        filePaths = filePaths.filter(function (name) { return !name.startsWith('.'); });
        utils_js_1.DOTFILE.IGNORE().then(function (ignorePatterns) {
            filePaths = filePaths.sort(); // Sort files alphanumerically
            var abortPush = false;
            var nonIgnoredFilePaths = [];
            var ignoredFilePaths = [];
            // Match the files with ignored glob pattern
            readMultipleFiles(filePaths, 'utf8', function (err, contents) {
                if (err)
                    return callback(new Error(err), null, null);
                // Check if there are any .gs files
                // We will prompt the user to rename files
                //
                // TODO: implement renaming files from .gs to .js
                // let canRenameToJS = false;
                // filePaths.map((name, i) => {
                //   if (path.extname(name) === '.gs') {
                //     canRenameToJS = true;
                //   }
                // });
                // Check if there are files that will conflict if renamed .gs to .js
                filePaths.map(function (name) {
                    var fileNameWithoutExt = name.slice(0, -path.extname(name).length);
                    if (filePaths.indexOf(fileNameWithoutExt + '.js') !== -1 &&
                        filePaths.indexOf(fileNameWithoutExt + '.gs') !== -1) {
                        // Can't rename, conflicting files
                        abortPush = true;
                        if (path.extname(name) === '.gs') { // only print error once (for .gs)
                            utils_js_1.logError(null, utils_js_1.ERROR.CONFLICTING_FILE_EXTENSION(fileNameWithoutExt));
                        }
                    }
                    else if (path.extname(name) === '.gs') {
                        // rename file to js
                        console.log(commands_js_1.LOG.RENAME_FILE(fileNameWithoutExt + '.gs', fileNameWithoutExt + '.js'));
                        fs.renameSync(fileNameWithoutExt + '.gs', fileNameWithoutExt + '.js');
                    }
                });
                if (abortPush)
                    return callback(new Error(), null, null);
                var files = filePaths.map(function (name, i) {
                    var nameWithoutExt = name.slice(0, -path.extname(name).length);
                    // Replace OS specific path separator to common '/' char
                    nameWithoutExt = nameWithoutExt.replace(/\\/g, '/');
                    // Formats rootDir/appsscript.json to appsscript.json.
                    // Preserves subdirectory names in rootDir
                    // (rootDir/foo/Code.js becomes foo/Code.js)
                    var formattedName = nameWithoutExt;
                    if (rootDir) {
                        formattedName = nameWithoutExt.slice(rootDir.length + 1, nameWithoutExt.length);
                    }
                    if (utils_js_1.getAPIFileType(name) && !anymatch(ignorePatterns, name)) {
                        nonIgnoredFilePaths.push(name);
                        var file = {
                            name: formattedName,
                            type: utils_js_1.getAPIFileType(name),
                            source: contents[i],
                        };
                        return file;
                    }
                    else {
                        ignoredFilePaths.push(name);
                        return; // Skip ignored files
                    }
                }).filter(Boolean); // remove null values
                callback(false, [nonIgnoredFilePaths, ignoredFilePaths], files);
            });
        });
    });
}
// CLI
/**
 * Set global CLI configurations
 */
commander
    .usage(utils_js_1.PROJECT_NAME + " <command> [options]")
    .description(utils_js_1.PROJECT_NAME + " - The Apps Script CLI");
/**
 * Logs the user in. Saves the client credentials to an rc file.
 */
commander
    .command('login')
    .description('Log in to script.google.com')
    .option('--no-localhost', 'Do not run a local server, manually enter code instead')
    .option('--ownkey', 'Save .clasprc.json file to current working directory')
    .action(function (options) {
    // Try to read the RC file.
    utils_js_1.DOTFILE.RC.read().then(function (rc) {
        console.warn(utils_js_1.ERROR.LOGGED_IN);
    }).catch(function (err) { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            utils_js_1.DOTFILE.RC_LOCAL.read().then(function (rc) {
                console.warn(utils_js_1.ERROR.LOGGED_IN);
            }).catch(function (err) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
                        case 1:
                            _a.sent();
                            authorize(options.localhost, options.ownkey);
                            return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/];
        });
    }); });
});
/**
 * Logs out the user by deleteing client credentials.
 */
commander
    .command('logout')
    .description('Log out')
    .action(function () {
    del(utils_js_1.DOT.RC.ABSOLUTE_PATH, { force: true }); // del doesn't work with a relative path (~)
    del(utils_js_1.DOT.RC.ABSOLUTE_LOCAL_PATH, { force: true });
});
/**
 * Creates a new script project.
 * @param {string} [scriptTitle] An optional project title.
 * @param {string} [scriptParentId] An optional project parent Id. The Drive ID of a parent file
 *   that the created script project is bound to. This is usually the ID of a
 *   Google Doc, Google Sheet, Google Form, or Google Slides file. If not set, a
 *   standalone script project is created.
 * @example `create "My Script" "1D_Gxyv*****************************NXO7o"`
 * @see https://developers.google.com/apps-script/api/reference/rest/v1/projects/create
 */
commander
    .command('create [scriptTitle] [scriptParentId]')
    .description('Create a script')
    .action(function (title, parentId) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!!title) return [3 /*break*/, 2];
                return [4 /*yield*/, prompt([{
                            type: 'input',
                            name: 'title',
                            message: 'give a script title:',
                            default: commands_js_1.LOG.UNTITLED_SCRIPT_TITLE,
                        }]).then(function (answers) {
                        title = answers.title;
                    }).catch(function (err) {
                        console.log(err);
                    })];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 3:
                _a.sent();
                if (fs.existsSync(utils_js_1.DOT.PROJECT.PATH)) {
                    utils_js_1.logError(null, utils_js_1.ERROR.FOLDER_EXISTS);
                }
                else {
                    auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                        var scriptId, err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.CREATE_PROJECT_START(title)).start();
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, utils_js_1.getProjectSettings(true)];
                                case 2:
                                    scriptId = (_a.sent()).scriptId;
                                    if (scriptId) {
                                        console.error(utils_js_1.ERROR.NO_NESTED_PROJECTS);
                                        process.exit(1);
                                    }
                                    return [3 /*break*/, 4];
                                case 3:
                                    err_1 = _a.sent();
                                    return [3 /*break*/, 4];
                                case 4:
                                    script.projects.create({ title: title, parentId: parentId }, {}).then(function (res) {
                                        utils_js_1.spinner.stop(true);
                                        var createdScriptId = res.data.scriptId;
                                        console.log(commands_js_1.LOG.CREATE_PROJECT_FINISH(createdScriptId));
                                        utils_js_1.saveProjectId(createdScriptId);
                                        if (!utils_js_1.manifestExists()) {
                                            fetchProject(createdScriptId); // fetches appsscript.json, o.w. `push` breaks
                                        }
                                    }).catch(function (error) {
                                        utils_js_1.spinner.stop(true);
                                        utils_js_1.logError(error, utils_js_1.ERROR.CREATE);
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                }
                return [2 /*return*/];
        }
    });
}); });
/**
 * Fetches the files for a project from the server and writes files locally to
 * `pwd` with dots converted to subdirectories.
 * @param {string} scriptId The project script id
 * @param {string?} rootDir The directory to save the project files to. Defaults to `pwd`
 * @param {number?} versionNumber The version of files to fetch.
 */
function fetchProject(scriptId, rootDir, versionNumber) {
    var _this = this;
    if (rootDir === void 0) { rootDir = ''; }
    utils_js_1.spinner.start();
    auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
                case 1:
                    _a.sent();
                    script.projects.getContent({
                        scriptId: scriptId,
                        versionNumber: versionNumber,
                    }, {}, function (error, _a) {
                        var data = _a.data;
                        utils_js_1.spinner.stop(true);
                        if (error) {
                            if (error.statusCode === 404)
                                return utils_js_1.logError(null, utils_js_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                            return utils_js_1.logError(error, utils_js_1.ERROR.SCRIPT_ID);
                        }
                        else {
                            if (!data.files) {
                                return utils_js_1.logError(null, utils_js_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                            }
                            // Create the files in the cwd
                            console.log(commands_js_1.LOG.CLONE_SUCCESS(data.files.length));
                            var sortedFiles = data.files.sort(function (file) { return file.name; });
                            sortedFiles.map(function (file) {
                                var filePath = file.name + "." + utils_js_1.getFileType(file.type);
                                var truePath = (rootDir || '.') + "/" + filePath;
                                mkdirp(path.dirname(truePath), function (err) {
                                    if (err)
                                        return utils_js_1.logError(err, utils_js_1.ERROR.FS_DIR_WRITE);
                                    if (!file.source)
                                        return; // disallow empty files
                                    fs.writeFile(truePath, file.source, function (err) {
                                        if (err)
                                            return utils_js_1.logError(err, utils_js_1.ERROR.FS_FILE_WRITE);
                                    });
                                    // Log only filename if pulling to root (Code.gs vs ./Code.gs)
                                    console.log("\u2514\u2500 " + (rootDir ? truePath : filePath));
                                });
                            });
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
}
/**
 * Fetches a project and saves the script id locally.
 */
commander
    .command('clone [scriptId] [versionNumber]')
    .description('Clone a project')
    .action(function (scriptId, versionNumber) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!!scriptId) return [3 /*break*/, 1];
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var drive, data, files, fileIds;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                drive = googleapis_1.google.drive({ version: 'v3', auth: auth_js_1.oauth2Client });
                                return [4 /*yield*/, drive.files.list({
                                        pageSize: 10,
                                        fields: 'files(id, name)',
                                        q: "mimeType='application/vnd.google-apps.script'",
                                    })];
                            case 1:
                                data = (_a.sent()).data;
                                files = data.files;
                                fileIds = [];
                                if (!files.length) return [3 /*break*/, 3];
                                files.map(function (file) {
                                    fileIds.push(("" + file.name).padEnd(20) + (" - (" + file.id + ")"));
                                });
                                return [4 /*yield*/, prompt([{
                                            type: 'list',
                                            name: 'scriptId',
                                            message: 'Clone which script? ',
                                            choices: fileIds,
                                        }]).then(function (answers) {
                                        utils_js_1.checkIfOnline();
                                        utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.CLONING);
                                        utils_js_1.saveProjectId(answers.scriptId);
                                        fetchProject(answers.scriptId, '', versionNumber);
                                    }).catch(function (err) {
                                        console.log(err);
                                    })];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                console.log(commands_js_1.LOG.FINDING_SCRIPTS_DNE);
                                _a.label = 4;
                            case 4: return [2 /*return*/];
                        }
                    });
                }); });
                return [3 /*break*/, 3];
            case 1: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 2:
                _a.sent();
                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.CLONING);
                utils_js_1.saveProjectId(scriptId);
                fetchProject(scriptId, '', versionNumber);
                _a.label = 3;
            case 3: return [2 /*return*/];
        }
    });
}); });
/**
 * Fetches a project from either a provided or saved script id.
 */
commander
    .command('pull')
    .description('Fetch a remote project')
    .action(function () { return __awaiter(_this, void 0, void 0, function () {
    var _a, scriptId, rootDir;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _b.sent();
                return [4 /*yield*/, utils_js_1.getProjectSettings()];
            case 2:
                _a = _b.sent(), scriptId = _a.scriptId, rootDir = _a.rootDir;
                if (scriptId) {
                    utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.PULLING);
                    fetchProject(scriptId, rootDir);
                }
                return [2 /*return*/];
        }
    });
}); });
/**
 * Force writes all local files to the script management server.
 * Ignores files:
 * - That start with a .
 * - That don't have an accepted file extension
 * - That are ignored (filename matches a glob pattern in the ignore file)
 */
commander
    .command('push')
    .description('Update the remote project')
    .action(function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.PUSHING).start();
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, scriptId, rootDir;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, utils_js_1.getProjectSettings()];
                            case 1:
                                _a = _b.sent(), scriptId = _a.scriptId, rootDir = _a.rootDir;
                                if (!scriptId)
                                    return [2 /*return*/];
                                getProjectFiles(rootDir, function (err, projectFiles, files) {
                                    if (err) {
                                        console.log(err);
                                        utils_js_1.spinner.stop(true);
                                    }
                                    else if (projectFiles) {
                                        var nonIgnoredFilePaths_1 = projectFiles[0];
                                        script.projects.updateContent({
                                            scriptId: scriptId,
                                            resource: { files: files },
                                        }, {}, function (error) {
                                            utils_js_1.spinner.stop(true);
                                            if (error) {
                                                console.error(commands_js_1.LOG.PUSH_FAILURE);
                                                error.errors.map(function (err) {
                                                    console.error(err.message);
                                                });
                                                console.error(commands_js_1.LOG.FILES_TO_PUSH);
                                                nonIgnoredFilePaths_1.map(function (filePath) {
                                                    console.error("\u2514\u2500 " + filePath);
                                                });
                                            }
                                            else {
                                                nonIgnoredFilePaths_1.map(function (filePath) {
                                                    console.log("\u2514\u2500 " + filePath);
                                                });
                                                console.log(commands_js_1.LOG.PUSH_SUCCESS(nonIgnoredFilePaths_1.length));
                                            }
                                        });
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Lists files that will be written to the server on `push`.
 * Ignores files:
 * - That start with a .
 * - That don't have an accepted file extension
 * - That are ignored (filename matches a glob pattern in the ignore file)
 */
commander
    .command('status')
    .description('Lists files that will be pushed by clasp')
    .option('--json', "Show status in JSON form")
    .action(function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                utils_js_1.getProjectSettings().then(function (_a) {
                    var scriptId = _a.scriptId, rootDir = _a.rootDir;
                    if (!scriptId)
                        return;
                    getProjectFiles(rootDir, function (err, projectFiles) {
                        if (err)
                            return console.log(err);
                        else if (projectFiles) {
                            var filesToPush = projectFiles[0], untrackedFiles = projectFiles[1];
                            if (cmd.json) {
                                console.log(JSON.stringify({ filesToPush: filesToPush, untrackedFiles: untrackedFiles }));
                            }
                            else {
                                console.log(commands_js_1.LOG.STATUS_PUSH);
                                filesToPush.forEach(function (file) { return console.log("\u2514\u2500 " + file); });
                                console.log(commands_js_1.LOG.STATUS_IGNORE);
                                untrackedFiles.forEach(function (file) { return console.log("\u2514\u2500 " + file); });
                            }
                        }
                    });
                });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Opens the script editor in the user's browser.
 */
commander
    .command('open [scriptId]')
    .description('Open a script')
    .action(function (scriptId) { return __awaiter(_this, void 0, void 0, function () {
    var settings;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!!scriptId) return [3 /*break*/, 2];
                return [4 /*yield*/, utils_js_1.getProjectSettings()];
            case 1:
                settings = _a.sent();
                scriptId = settings.scriptId;
                _a.label = 2;
            case 2:
                if (scriptId.length < 30) {
                    utils_js_1.logError(null, utils_js_1.ERROR.SCRIPT_ID_INCORRECT(scriptId));
                }
                else {
                    console.log(commands_js_1.LOG.OPEN_PROJECT(scriptId));
                    open(utils_js_1.getScriptURL(scriptId));
                }
                return [2 /*return*/];
        }
    });
}); });
/**
 * List deployments of a script
 */
commander
    .command('deployments')
    .description('List deployment ids of a script')
    .action(function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var scriptId;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, utils_js_1.getProjectSettings()];
                            case 1:
                                scriptId = (_a.sent()).scriptId;
                                if (!scriptId)
                                    return [2 /*return*/];
                                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.DEPLOYMENT_LIST(scriptId)).start();
                                script.projects.deployments.list({
                                    scriptId: scriptId,
                                }, {}, function (error, _a) {
                                    var data = _a.data;
                                    utils_js_1.spinner.stop(true);
                                    if (error) {
                                        utils_js_1.logError(error);
                                    }
                                    else {
                                        var deployments = data.deployments;
                                        var numDeployments = deployments.length;
                                        var deploymentWord = pluralize('Deployment', numDeployments);
                                        console.log(numDeployments + " " + deploymentWord + ".");
                                        deployments.map(function (_a) {
                                            var deploymentId = _a.deploymentId, deploymentConfig = _a.deploymentConfig;
                                            var versionString = !!deploymentConfig.versionNumber ?
                                                "@" + deploymentConfig.versionNumber : '@HEAD';
                                            var description = deploymentConfig.description ?
                                                '- ' + deploymentConfig.description : '';
                                            console.log("- " + deploymentId + " " + versionString + " " + description);
                                        });
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Creates a version and deploys a script.
 * The response gives the version of the deployment.
 */
commander
    .command('deploy [version] [description]')
    .description('Deploy a project')
    .action(function (version, description) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                description = description || '';
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    function createDeployment(versionNumber) {
                        utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.DEPLOYMENT_CREATE);
                        script.projects.deployments.create({
                            scriptId: scriptId,
                            resource: {
                                versionNumber: versionNumber,
                                manifestFileName: utils_js_1.PROJECT_MANIFEST_BASENAME,
                                description: description,
                            },
                        }, {}, function (err, response) {
                            utils_js_1.spinner.stop(true);
                            if (err) {
                                console.error(utils_js_1.ERROR.DEPLOYMENT_COUNT);
                            }
                            else if (response) {
                                console.log("- " + response.data.deploymentId + " @" + versionNumber + ".");
                            }
                        });
                    }
                    var scriptId, versionRequestBody;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, utils_js_1.getProjectSettings()];
                            case 1:
                                scriptId = (_a.sent()).scriptId;
                                if (!scriptId)
                                    return [2 /*return*/];
                                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.DEPLOYMENT_START(scriptId)).start();
                                versionRequestBody = {
                                    description: description,
                                };
                                if (version) {
                                    createDeployment(version);
                                }
                                else { // if no version, create a new version and deploy that
                                    script.projects.versions.create({
                                        scriptId: scriptId,
                                        resource: versionRequestBody,
                                    }, {}, function (err, _a) {
                                        var data = _a.data;
                                        utils_js_1.spinner.stop(true);
                                        if (err) {
                                            utils_js_1.logError(null, utils_js_1.ERROR.ONE_DEPLOYMENT_CREATE);
                                        }
                                        else {
                                            console.log(commands_js_1.LOG.VERSION_CREATED(data.versionNumber));
                                            createDeployment(data.versionNumber);
                                        }
                                    });
                                }
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Undeploys a deployment of a script.
 * @example "undeploy 123"
 */
commander
    .command('undeploy <deploymentId>')
    .description('Undeploy a deployment of a project')
    .action(function (deploymentId) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                auth_js_1.getAPICredentials(function () {
                    utils_js_1.getProjectSettings().then(function (_a) {
                        var scriptId = _a.scriptId;
                        if (!scriptId)
                            return;
                        utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.UNDEPLOYMENT_START(deploymentId)).start();
                        script.projects.deployments.delete({
                            scriptId: scriptId,
                            deploymentId: deploymentId,
                        }, {}, function (err, res) {
                            utils_js_1.spinner.stop(true);
                            if (err) {
                                utils_js_1.logError(null, utils_js_1.ERROR.READ_ONLY_DELETE);
                            }
                            else {
                                console.log(commands_js_1.LOG.UNDEPLOYMENT_FINISH(deploymentId));
                            }
                        });
                    });
                });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Updates deployments of a script
 */
commander
    .command('redeploy <deploymentId> <version> <description>')
    .description("Update a deployment")
    .action(function (deploymentId, version, description) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                auth_js_1.getAPICredentials(function () {
                    utils_js_1.getProjectSettings().then(function (_a) {
                        var scriptId = _a.scriptId;
                        script.projects.deployments.update({
                            scriptId: scriptId,
                            deploymentId: deploymentId,
                            resource: {
                                deploymentConfig: {
                                    versionNumber: version,
                                    manifestFileName: utils_js_1.PROJECT_MANIFEST_BASENAME,
                                    description: description,
                                },
                            },
                        }, {}, function (error, res) {
                            utils_js_1.spinner.stop(true);
                            if (error) {
                                utils_js_1.logError(null, error); // TODO prettier error
                            }
                            else {
                                console.log(commands_js_1.LOG.REDEPLOY_END);
                            }
                        });
                    });
                });
                return [2 /*return*/];
        }
    });
}); });
/**
 * List versions of a script
 */
commander
    .command('versions')
    .description('List versions of a script')
    .action(function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                utils_js_1.spinner.setSpinnerTitle('Grabbing versions...').start();
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var scriptId;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, utils_js_1.getProjectSettings()];
                            case 1:
                                scriptId = (_a.sent()).scriptId;
                                script.projects.versions.list({
                                    scriptId: scriptId,
                                }, {}, function (error, _a) {
                                    var data = _a.data;
                                    utils_js_1.spinner.stop(true);
                                    if (error) {
                                        utils_js_1.logError(error);
                                    }
                                    else {
                                        if (data && data.versions && data.versions.length) {
                                            var numVersions = data.versions.length;
                                            console.log(commands_js_1.LOG.VERSION_NUM(numVersions));
                                            data.versions.map(function (version) {
                                                console.log(commands_js_1.LOG.VERSION_DESCRIPTION(version));
                                            });
                                        }
                                        else {
                                            console.error(commands_js_1.LOG.DEPLOYMENT_DNE);
                                        }
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Creates an immutable version of the script
 */
commander
    .command('version [description]')
    .description('Creates an immutable version of the script')
    .action(function (description) { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.VERSION_CREATE).start();
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var scriptId;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, utils_js_1.getProjectSettings()];
                            case 1:
                                scriptId = (_a.sent()).scriptId;
                                script.projects.versions.create({
                                    scriptId: scriptId,
                                    description: description,
                                }, {}, function (error, _a) {
                                    var data = _a.data;
                                    utils_js_1.spinner.stop(true);
                                    if (error) {
                                        utils_js_1.logError(error);
                                    }
                                    else {
                                        console.log(commands_js_1.LOG.VERSION_CREATED(data.versionNumber));
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Lists your most recent 10 apps scripts
 * TODO: add --all flag
 * @example `list`
 * This would show someting like:
 * helloworld1          – xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * helloworld2          – xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 * helloworld3          – xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 */
commander
    .command('list')
    .description('List App Scripts projects')
    .action(function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                utils_js_1.spinner.setSpinnerTitle(commands_js_1.LOG.FINDING_SCRIPTS).start();
                auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
                    var drive, res, files;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                drive = googleapis_1.google.drive({ version: 'v3', auth: auth_js_1.oauth2Client });
                                return [4 /*yield*/, drive.files.list({
                                        pageSize: 50,
                                        fields: 'nextPageToken, files(id, name)',
                                        q: "mimeType='application/vnd.google-apps.script'",
                                    })];
                            case 1:
                                res = _a.sent();
                                utils_js_1.spinner.stop(true);
                                files = res.data.files;
                                if (files.length) {
                                    files.map(function (file) {
                                        console.log(file.name.padEnd(20) + " \u2013 " + utils_js_1.getScriptURL(file.id));
                                    });
                                }
                                else {
                                    console.log('No script files found.');
                                }
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
        }
    });
}); });
/**
 * Prints out 5 most recent the StackDriver logs.
 * Use --json for output in json format
 * Use --open to open logs in StackDriver
 */
commander
    .command('logs')
    .description('Shows the StackDriver logs')
    .option('--json', "Show logs in JSON form")
    .option('--open', 'Open the StackDriver logs in browser')
    .action(function (cmd) { return __awaiter(_this, void 0, void 0, function () {
    function printLogs(_a) {
        var entries = _a[0];
        for (var i = 0; i < 5; ++i) {
            var metadata = entries[i].metadata;
            var severity = metadata.severity, timestamp = metadata.timestamp, payload = metadata.payload;
            var functionName = entries[i].metadata.resource.labels.function_name;
            functionName = functionName ? functionName.padEnd(15) : utils_js_1.ERROR.NO_FUNCTION_NAME;
            var payloadData = '';
            if (cmd.json) {
                payloadData = JSON.stringify(entries[i], null, 2);
            }
            else {
                var data = {
                    textPayload: metadata.textPayload,
                    jsonPayload: metadata.jsonPayload ? metadata.jsonPayload.fields.message.stringValue : '',
                    protoPayload: metadata.protoPayload,
                };
                payloadData = data[payload] || utils_js_1.ERROR.PAYLOAD_UNKNOWN;
                if (payloadData && typeof (payloadData) === 'string') {
                    payloadData = payloadData.padEnd(20);
                }
            }
            var coloredSeverity = ({
                ERROR: chalk.red(severity),
                INFO: chalk.blue(severity),
                DEBUG: chalk.yellow(severity),
                NOTICE: chalk.magenta(severity),
            })[severity] || severity;
            coloredSeverity = String(coloredSeverity).padEnd(20);
            console.log(coloredSeverity + " " + timestamp + " " + functionName + " " + payloadData);
        }
    }
    var projectId, url, logger;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils_js_1.checkIfOnline()];
            case 1:
                _a.sent();
                return [4 /*yield*/, utils_js_1.getProjectSettings()];
            case 2:
                projectId = (_a.sent()).projectId;
                if (!projectId) {
                    console.error(utils_js_1.ERROR.NO_GCLOUD_PROJECT);
                    process.exit(-1);
                }
                if (cmd.open) {
                    url = 'https://console.cloud.google.com/logs/viewer?project=' +
                        (projectId + "&resource=app_script_function");
                    console.log("Opening logs: " + url);
                    open(url);
                    process.exit(0);
                }
                logger = new logging({
                    projectId: projectId,
                });
                return [2 /*return*/, logger.getEntries().then(printLogs).catch(function (err) {
                        console.error(utils_js_1.ERROR.LOGS_UNAVAILABLE);
                    })];
        }
    });
}); });
/**
 * Clasp run <functionName>
 * This function runs your script in the cloud. You must supply
 * the functionName params. For now, it can
 * only run functions that do not require other authorization.
 * @param functionName function in the script that you want to run
 * @see https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run
 * Note: to use this command, you must have used `clasp login --ownkey`
 */
commander
    .command('run <functionName>')
    .description('Run a function in your Apps Scripts project')
    .action(function (functionName) {
    console.log('IN DEVELOPMENT');
    process.exit(0);
    console.log('start run');
    auth_js_1.getAPICredentials(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('got creds');
                    return [4 /*yield*/, utils_js_1.checkIfOnline()];
                case 1:
                    _a.sent();
                    console.log('online');
                    utils_js_1.getProjectSettings().then(function (_a) {
                        var scriptId = _a.scriptId;
                        var params = {
                            scriptId: scriptId,
                            function: functionName,
                            devMode: true,
                        };
                        console.log('about to run');
                        script.scripts.run(params).then(function (response) {
                            console.log(response.data);
                        }).catch(function (e) {
                            console.log(e);
                        });
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
/**
 * Displays the help function
 */
commander
    .command('help')
    .description('Display help')
    .action(function () {
    commander.outputHelp();
});
/**
 * All other commands are given a help message.
 */
commander
    .command('*', { isDefault: true })
    .description('Any other command is not supported')
    .action(function (command) {
    console.error(utils_js_1.ERROR.COMMAND_DNE(command));
});
// defaults to help if commands are not provided
if (!process.argv.slice(2).length) {
    commander.outputHelp();
}
// User input is provided from the process' arguments
commander.parse(process.argv);
