"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var fs = require("fs-extra");
var os = require("os");
var spawnSync = require('child_process').spawnSync;
var utils_js_1 = require("./../src/utils.js");
var path = require("path");
var tmp = require("tmp");
mocha_1.describe('Test help for each function', function () {
    mocha_1.it('should output help for run command', function () {
        var result = spawnSync('clasp', ['run', '--help'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include('Run a function in your Apps Scripts project');
    });
    mocha_1.it('should output help for logs command', function () {
        var result = spawnSync('clasp', ['logs', '--help'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include('Shows the StackDriver logs');
    });
});
mocha_1.describe.skip('Test clasp list function', function () {
    mocha_1.it('should list clasp projects correctly', function () {
        var result = spawnSync('clasp', ['list'], { encoding: 'utf8' });
        // Every project starts with this base URL, thus
        // using clasp list should at least contain this
        // in its output.
        chai_1.expect(result.stdout).to.contain('https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp create function', function () {
    mocha_1.it('should prompt for a project name correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync('clasp', ['create'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('give a script title:');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp create <projectName> function', function () {
    mocha_1.it('should create a new project correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync('clasp', ['create', 'sampleProject'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created new script: https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp create <title> function', function () {
    mocha_1.it('should create a new project named <title> correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync('clasp', ['create', 'myTitle'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created new script: https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp clone <scriptId> function', function () {
    mocha_1.it('should clone an existing project correctly', function () {
        var settings = JSON.parse(fs.readFileSync('.clasp.json', 'utf8'));
        var result = spawnSync('clasp', ['clone', settings.scriptId], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp pull function', function () {
    mocha_1.it('should pull an existing project correctly', function () {
        var result = spawnSync('clasp', ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp push function', function () {
    mocha_1.it('should push local project correctly', function () {
        fs.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json');
        var result = spawnSync('clasp', ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Pushed');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp status function', function () {
    function setupTmpDirectory(filepathsAndContents) {
        fs.ensureDirSync('tmp');
        var tmpdir = tmp.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
        filepathsAndContents.forEach(function (_a) {
            var file = _a.file, data = _a.data;
            fs.outputFileSync(path.join(tmpdir, file), data);
        });
        return tmpdir;
    }
    mocha_1.it("should respect globs and negation rules", function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: ' ' },
            { file: 'appsscript.json', data: ' ' },
            { file: 'shouldBeIgnored', data: ' ' },
            { file: 'should/alsoBeIgnored', data: ' ' },
        ]);
        spawnSync('clasp', ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync('clasp', ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members(['shouldBeIgnored', 'should/alsoBeIgnored']);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
    });
    // https://github.com/google/clasp/issues/67 - This test currently fails
    mocha_1.it.skip('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: ' ' },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: ' ' },
        ]);
        spawnSync('clasp', ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync('clasp', ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            'node_modules/fsevents/build/Release/.deps/Release/.node.d'
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
    });
});
mocha_1.describe.skip('Test clasp open function', function () {
    mocha_1.it('should open a project correctly', function () {
        var result = spawnSync('clasp', ['open'], { encoding: 'utf8' });
        //should open a browser with the project
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp clone function', function () {
    mocha_1.it('should prompt for which script to clone correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync('clasp', ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp deployments function', function () {
    mocha_1.it('should list deployments correctly', function () {
        var result = spawnSync('clasp', ['deployments'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Deployments.');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp deploy function', function () {
    mocha_1.it('should deploy correctly', function () {
        var result = spawnSync('clasp', ['deploy'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created version ');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe.skip('Test clasp version and versions function', function () {
    var versionNumber = '';
    mocha_1.it('should create new version correctly', function () {
        var result = spawnSync('clasp', ['version'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created version ');
        chai_1.expect(result.status).to.equal(0);
        versionNumber = result.stdout.substring(result.stdout.lastIndexOf(' '), result.stdout.length - 2);
        mocha_1.it('should list versions correctly', function () {
            var result = spawnSync('clasp', ['versions'], { encoding: 'utf8' });
            chai_1.expect(result.stdout).to.contain('Versions');
            chai_1.expect(result.stdout).to.contain(versionNumber + ' - ');
            chai_1.expect(result.status).to.equal(0);
        });
    });
});
mocha_1.describe('Test getScriptURL function from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_js_1.getScriptURL('abcdefghijklmnopqrstuvwxyz');
        chai_1.expect(url).to.equal('https://script.google.com/d/abcdefghijklmnopqrstuvwxyz/edit');
    });
});
mocha_1.describe('Test getFileType function from utils', function () {
    mocha_1.it('should return the lowercase file type correctly', function () {
        chai_1.expect(utils_js_1.getFileType('SERVER_JS')).to.equal('js');
        chai_1.expect(utils_js_1.getFileType('GS')).to.equal('gs');
        chai_1.expect(utils_js_1.getFileType('JS')).to.equal('js');
    });
});
mocha_1.describe('Test getAPIFileType function from utils', function () {
    mocha_1.it('should return the uppercase file type correctly', function () {
        chai_1.expect(utils_js_1.getAPIFileType('file.GS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.JS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.js')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.jsx')).to.equal('JSX');
        chai_1.expect(utils_js_1.getAPIFileType('file.js.html')).to.equal('HTML');
    });
});
mocha_1.describe('Test saveProjectId function from utils', function () {
    mocha_1.it('should save the scriptId correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(_this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_js_1.saveProjectId('12345')];
                    case 1:
                        _a.sent();
                        id = fs.readFileSync(path.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
});
mocha_1.describe.skip('Test clasp logout function', function () {
    mocha_1.it('should logout correctly', function () {
        fs.writeFileSync('.clasprc.json', ' ');
        fs.writeFileSync(path.join(os.homedir(), '/.clasprc.json'), ' ');
        var result = spawnSync('clasp', ['logout'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        var localDotExists = fs.existsSync('.clasprc.json');
        chai_1.expect(localDotExists).to.equal(false);
        var dotExists = fs.existsSync('~/.clasprc.json');
        chai_1.expect(dotExists).to.equal(false);
    });
});
/**
 * TODO: Test these commands and configs.
 *
 * # Commands:
 * [ ] clasp;
 * [ ] clasp login';
 * [ ] clasp login --no-localhost;
 * [x] clasp logout;
 * [x] clasp create "myTitle"
 * [x] clasp create <untitled>
 * [x] clasp list
 * [x] clasp clone <scriptId>
 * [x] clasp clone
 * [x] clasp pull
 * [x] clasp push
 * [ ] echo '// test' >> index.js && clasp push
 * [x] clasp open
 * [ ] clasp deployments
 * [ ] clasp deploy [version] [description]
 * [ ] clasp redeploy <deploymentId> <version> <description>
 * [ ] clasp version [description]
 * [x] clasp versions
 * [x] saveProjectId
 * [x] getScriptURL
 * [x] getFileType
 * [x] getAPIFileType
 *
 * # Configs
 * - .js and .gs files
 * - Ignored files
 */ 
